@model TestingSystem.BOL.Model.TestDTO

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_TeacherLayout.cshtml";
}

@using (Html.BeginForm("Edit", "test"))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.TestName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TestName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TestName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SpecializationName, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.Label(ViewBag.Specialization as string, new { htmlAttributes = new { @class = "form-control", disabled="disabled" } })
                @Html.ValidationMessageFor(model => model.SpecializationId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="subject-cont">
            @Html.LabelFor(m => m.SubjectName, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.Label(ViewBag.Subject as string, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.SubjectId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.QuestionCount, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.QuestionCount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.QuestionCount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsOpen, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsOpen)
                    @Html.ValidationMessageFor(model => model.IsOpen, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-success" id="submit" onclick="submitLimit()" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(function () {
            $("#SpecializationId").change(function () {
                subjects = $("#SubjectId");
                $("#subject-cont").show();
                $.getJSON("@Url.Action("GetSubjectsBySpecialization", "Service")", { id : $(this).val()}, function (response) {
                    subjects.empty();
                    $.each(response, function (index, item) {
                        subjects.append($('<option></option>').text(item.SubjectName).val(item.Id));
                    });
                });
            });
        });
        function submitLimit() {
            var btn = document.getElementById('submit')
            setTimeout(function () {
                btn.setAttribute('disabled', 'disabled');
            }, 1);

            setTimeout(function () {
                btn.removeAttribute('disabled');
            }, 10000);
        }
    </script>
}