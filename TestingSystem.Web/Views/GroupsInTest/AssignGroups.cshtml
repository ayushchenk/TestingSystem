@model TestingSystem.Web.Models.ViewModels.AssignGroupsViewModel

@{
    ViewBag.Title = "AssignGroups";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<h2>AssignGroups</h2>

@if (Model.Groups != null && Model.Groups.Count != 0)
{
    using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.TestId)
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayName("Assign")
                </th>
                <th>
                    @Html.DisplayName("Group Name")
                </th>
                <th>
                    @Html.DisplayName("Date")
                </th>
                <th>
                    @Html.DisplayName("Start time")
                </th>
                <th>
                    @Html.DisplayName("Length")
                </th>
                <th></th>
            </tr>
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @for (int i = 0; i < Model.Groups.Count; i++)
            {
                <tr>
                    <td>
                        @Html.CheckBoxFor(x => x.Groups[i].Assign, new { @class = "assign-chbox form-control", data_id = Model.Groups[i].Group.Id })
                    </td>
                    <td>
                        @Html.Label(Model.Groups[i].Group.GroupName)
                    </td>
                    <td>
                        @Html.EditorFor(x => x.Groups[i].GroupInTest.StartDate, new { @type = "date", htmlAttributes = new { @class = $"to-hide start-date-{Model.Groups[i].Group.Id} form-control" } })
                        <br />
                        @Html.ValidationMessageFor(x => x.Groups[i].GroupInTest.StartDate, "", new { @class = "text-danger" })
                    </td>
                    <td>
                        @Html.EditorFor(x => x.Groups[i].GroupInTest.StartTime, new { @type = "time", htmlAttributes = new { @class = $"to-hide start-time-{Model.Groups[i].Group.Id} form-control" } })
                        <br />
                        @Html.ValidationMessageFor(x => x.Groups[i].GroupInTest.StartTime, "", new { @class = "text-danger" })
                    </td>
                    <td>
                        @Html.EditorFor(x => x.Groups[i].GroupInTest.Length, new { htmlAttributes = new { @class = $"to-hide length-{Model.Groups[i].Group.Id} form-control" } })
                        <br />
                        @Html.ValidationMessageFor(x => x.Groups[i].GroupInTest.Length, "", new { @class = "text-danger" })
                    </td>
                    <td>
                        @Html.ActionLink("Users", "Users", "Group", new { id = Model.Groups[i].Group.Id }, null)
                    </td>
                </tr>
                @Html.HiddenFor(x => x.Groups[i].Group.Id)
                @Html.HiddenFor(x => x.Groups[i].Group.GroupName)
                @Html.HiddenFor(x => x.Groups[i].Group.SpecializationId)
            }

        </table>
        <input type="submit" value="Save" class="btn btn-default" />
    }
}
else
{
    <div class="alert-info">
        No groups
    </div>
}

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(function () {
            $(".to-hide").hide();

            $(".assign-chbox").change(function () {
                if (this.checked) {
                    $(".start-date-" + $(this).attr("data-id")).show();
                    $(".start-time-" + $(this).attr("data-id")).show();
                    $(".length-" + $(this).attr("data-id")).show();
                } else {
                    $(".start-date-" + $(this).attr("data-id")).hide();
                    $(".start-time-" + $(this).attr("data-id")).hide();
                    $(".length-" + $(this).attr("data-id")).hide();
                }
            });
        });
    </script>
}
